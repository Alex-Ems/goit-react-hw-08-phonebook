{"version":3,"file":"static/js/351.c979c4d4.chunk.js","mappings":"qPAwFA,UA/EkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHN,EAASO,GACT,MACF,IAAK,WACHL,EAAYK,GACZ,MACF,QACEP,EAAS,IACTE,EAAY,IAEjB,EAEKM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAcFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,gBAAKE,UAAWC,EAAAA,EAAAA,UAAhB,UACA,kBAAMC,SAjBa,SAAAf,GAGnB,GAFAA,EAAEgB,iBAEEpB,KAAcE,MAAkBJ,EAAAA,SAClC,OAAOuB,EAAAA,GAAAA,MAAA,2CAGTb,GAASc,EAAAA,EAAAA,IAAU,CAAEvB,MAAOA,EAAOE,SAAUA,KAC7CD,EAAS,IACTE,EAAY,GACb,EAO+Be,UAAWC,EAAAA,EAAAA,WAAzC,WACE,kBAAOD,UAAWC,EAAAA,EAAAA,YAAiBK,QAASV,EAA5C,oBAGA,kBACEW,GAAIX,EACJY,KAAK,QACLnB,KAAK,QACLC,MAAOR,EACP2B,SAAUvB,EACVwB,UAAQ,EACRC,YAAY,gBACZX,UAAWC,EAAAA,EAAAA,eAEb,kBAAOD,UAAWC,EAAAA,EAAAA,YAAiBK,QAASP,EAA5C,uBAGA,kBACEQ,GAAIR,EACJS,KAAK,WACLnB,KAAK,WACLC,MAAON,EACPyB,SAAUvB,EACVwB,UAAQ,EACRC,YAAY,gBACZX,UAAWC,EAAAA,EAAAA,cAEXR,GAKA,SAAC,IAAD,KAJA,mBAAQe,KAAK,SAASR,UAAWC,EAAAA,EAAAA,OAAjC,wBASP,C,qBCrFD,KAAgB,UAAY,+BAA+B,WAAa,gCAAgC,YAAc,iCAAiC,YAAc,iCAAiC,OAAS,4BAA4B,OAAS,4B,wDCA7O,IAkBIH,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Phonebook/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { getAuth } from 'redux/Auth/authSlice';\nimport { loginUser } from 'redux/Auth/authOperations';\nimport css from '../ContactForm/ContactForm.module.css';\nimport { Loader } from '../Loader/Loader';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        setEmail('');\n        setPassword('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (setEmail() && setPassword() !== useState) {\n      return toast.error(`Please, enter correct Email or Password`);\n    }\n\n    dispatch(loginUser({ email: email, password: password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={css.container}>\n    <form onSubmit={handleSubmit} className={css.formStyles}>\n      <label className={css.labelStyles} htmlFor={emailId}>\n        Email\n      </label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"mail@mail.com\"\n        className={css.inputStyles}\n      />\n      <label className={css.labelStyles} htmlFor={passwordId}>\n        Password\n      </label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"your password\"\n        className={css.inputStyles}\n      />\n      {!isLoading ? (\n        <button type=\"submit\" className={css.btnLog}>\n          Log In\n        </button>\n      ) : (\n        <Loader />\n      )}\n      </form>\n      </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__UPfjb\",\"formStyles\":\"ContactForm_formStyles__YRsb1\",\"labelStyles\":\"ContactForm_labelStyles__Ghfrx\",\"inputStyles\":\"ContactForm_inputStyles__DHTkv\",\"btnAdd\":\"ContactForm_btnAdd__NdJTh\",\"btnLog\":\"ContactForm_btnLog__MVjy5\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","className","css","onSubmit","preventDefault","toast","loginUser","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}