{"version":3,"file":"static/js/242.07121983.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactList/Contacts.module.css?d651","components/Phonebook/ContactList/ContactItem.jsx","components/Phonebook/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Phonebook/Filter/Filter.module.css?44e1","components/Phonebook/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/Contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'contactName':\n        setName(value);\n        break;\n      case 'contactNumber':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts?.find(\n        contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n      )\n    ) {\n      return toast.error(`${name} is already in Phonebook`);\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <div className={css.container}>\n      <form className={css.formStyles} onSubmit={handleSubmit}>\n        <label className={css.labelStyles}>\n          Name\n          <input\n            id={nameId}\n            className={css.inputStyles}\n            type=\"text\"\n            name=\"contactName\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Alex\"\n            required\n          />\n        </label>\n        <label className={css.labelStyles}>\n          Number\n          <input\n            id={numberId}\n            className={css.inputStyles}\n            type=\"tel\"\n            name=\"contactNumber\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"111-22-33\"\n            required\n          />\n        </label>\n        <button className={css.btnAdd} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__Lokfe\",\"listContacts\":\"Contacts_listContacts__BVO7d\",\"listContactsItem\":\"Contacts_listContactsItem__Hx4TK\",\"btnDelete\":\"Contacts_btnDelete__5lZD1\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/Contacts/operations';\nimport css from './Contacts.module.css';\n\nexport const ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = data;\n\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n    dispatch(deleteContact(id));\n  };\n  return (\n      <li className={css.listContactsItem}>\n        <p className={css.contactText}>\n          {name.toUpperCase()}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={css.btnDelete}\n          id={id}\n          onClick={e => onDeleteClick(e, id)}\n        >\n          Delete\n        </button>\n      </li>\n  );\n};\n\nContactItem.propTypes = {\n  data: PropTypes.objectOf(PropTypes.string.isRequired),\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { ContactItem } from './ContactItem';\nimport css from './Contacts.module.css';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/Contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter.data);\n\n   useEffect(() => {\n     dispatch(fetchContacts());\n   }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n    return contacts.filter(\n      ({ name, number }) =>\n        name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()) ||\n        number.includes(filter)\n    );\n  };\n\n  const contactsToRender = getFilteredContacts();\n  \n  return (\n    <div className={css.container}>\n      <ul className={css.listContacts}>\n        {contactsToRender?.map(item => (\n          <ContactItem key={item.id} data={item} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__uyFt-\",\"filterLabelStyles\":\"Filter_filterLabelStyles__6urvA\",\"filterInputStyles\":\"Filter_filterInputStyles__-RYHh\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/Contacts/filterSlice';\n\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const name = useSelector(state => state.filter.data);\n\n\n  const handlerFilter = evt => {\n    dispatch(filterContacts(evt.target.value));\n  };\n\n  const filterId = nanoid();\n\n  return (\n    <form className={css.container}>\n      <label htmlFor={filterId} className={css.filterLabelStyles}>\n        Find Contacts by name or number!\n        <input\n          id={filterId}\n          className={css.filterInputStyles}\n          type=\"text\"\n          name=\"filter\"\n          value={name}\n          onChange={handlerFilter}\n          placeholder=\"Enter find of name or number\"\n        />\n      </label>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"titleContacts\":\"Phonebook_titleContacts__4719S\",\"titlePhonebook\":\"Phonebook_titlePhonebook__XW2Co\",\"description\":\"Phonebook_description__PjK7a\"};","import { ContactForm } from './ContactForm/ContactForm';\nimport React from 'react';\nimport { ContactList } from './ContactList/ContactList';\nimport { Filter } from './Filter/Filter';\nimport css from './Phonebook.module.css';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <div className={css.container}>\n        <h1 className={css.titlePhonebook}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={css.titleContacts}>Contacts</h2>\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      </div>\n    </>\n  );\n};\n\nexport default Phonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__UPfjb\",\"formStyles\":\"ContactForm_formStyles__YRsb1\",\"labelStyles\":\"ContactForm_labelStyles__Ghfrx\",\"inputStyles\":\"ContactForm_inputStyles__DHTkv\",\"btnAdd\":\"ContactForm_btnAdd__NdJTh\",\"btnLog\":\"ContactForm_btnLog__MVjy5\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","handleChange","e","target","value","nameId","nanoid","numberId","className","css","onSubmit","preventDefault","find","contact","toLocaleLowerCase","toast","addContact","id","type","onChange","pattern","title","placeholder","required","ContactItem","data","toUpperCase","onClick","textContent","setAttribute","deleteContact","onDeleteClick","ContactList","filter","useEffect","fetchContacts","contactsToRender","includes","map","item","Filter","filterId","htmlFor","evt","filterContacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString"],"sourceRoot":""}